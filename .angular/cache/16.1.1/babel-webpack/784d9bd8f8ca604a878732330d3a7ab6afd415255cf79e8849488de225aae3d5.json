{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FormService {\n  constructor() {\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.validAmount = new Subject();\n    this.useBackend = true; //hopefully same instance injected everywhere    \n  }\n  //Fills result Map with the amounts of notes and coins \n  calcResult(total, result) {\n    let newResult = new Map();\n    if (this.useBackend) {\n      console.log(\"using backend calculate IF\");\n      return [newResult, newResult];\n    } else {\n      let previousResult = new Map(result);\n      let rest = total;\n      //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n      for (let key of result.keys()) {\n        let value = Math.floor(rest / key);\n        result.set(key, value); //should modify result as a side effect \n        rest = rest % key;\n      }\n      //calculating the difference\n      return [newResult, previousResult];\n    }\n  }\n  calcDifference(previousResult) {\n    if (previousResult.size > 0) {}\n    return;\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)();\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","FormService","constructor","validAmount","useBackend","calcResult","total","result","newResult","Map","console","log","previousResult","rest","key","keys","value","Math","floor","set","calcDifference","size","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  validAmount: Subject<number> = new Subject<number>;\n  useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor() { }\n\n    //Fills result Map with the amounts of notes and coins \n    calcResult(total: number, result: Map<number, number>): Map<any, any>[]  {\n      let newResult = new Map();\n      if (this.useBackend) {\n        console.log(\"using backend calculate IF\");\n        return [newResult, newResult];\n       }\n      else {\n  \n        let previousResult = new Map(result);\n        \n        \n        let rest: number = total;\n        //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n        for (let key of result.keys()) {\n          let value: number = Math.floor(rest/key);\n          result.set(key, value);  //should modify result as a side effect \n\n          rest = rest%key;\n        }\n        //calculating the difference\n        \n\n        return [newResult, previousResult];\n        \n      }\n  \n    }\n\n    calcDifference(previousResult: Map<number, number>): Map<number, string> {\n\n      if (previousResult.size > 0) {\n  \n      }\n      return \n    }\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAMtBC,YAAA;IAJA;IACA,KAAAC,WAAW,GAAoB,IAAIH,OAAe,CAAf,CAAe;IAClD,KAAAI,UAAU,GAAY,IAAI,CAAC,CAAC;EAEZ;EAEd;EACAC,UAAUA,CAACC,KAAa,EAAEC,MAA2B;IACnD,IAAIC,SAAS,GAAG,IAAIC,GAAG,EAAE;IACzB,IAAI,IAAI,CAACL,UAAU,EAAE;MACnBM,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,OAAO,CAACH,SAAS,EAAEA,SAAS,CAAC;KAC7B,MACG;MAEH,IAAII,cAAc,GAAG,IAAIH,GAAG,CAACF,MAAM,CAAC;MAGpC,IAAIM,IAAI,GAAWP,KAAK;MACxB;MACA,KAAK,IAAIQ,GAAG,IAAIP,MAAM,CAACQ,IAAI,EAAE,EAAE;QAC7B,IAAIC,KAAK,GAAWC,IAAI,CAACC,KAAK,CAACL,IAAI,GAACC,GAAG,CAAC;QACxCP,MAAM,CAACY,GAAG,CAACL,GAAG,EAAEE,KAAK,CAAC,CAAC,CAAE;QAEzBH,IAAI,GAAGA,IAAI,GAACC,GAAG;;MAEjB;MAGA,OAAO,CAACN,SAAS,EAAEI,cAAc,CAAC;;EAItC;EAEAQ,cAAcA,CAACR,cAAmC;IAEhD,IAAIA,cAAc,CAACS,IAAI,GAAG,CAAC,EAAE,C;IAG7B;EACF;;AA3CSpB,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}