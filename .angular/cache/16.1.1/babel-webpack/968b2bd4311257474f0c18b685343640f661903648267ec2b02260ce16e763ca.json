{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Dto } from '../common/dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FormService = /*#__PURE__*/(() => {\n  class FormService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n      this.submittedForm = new Subject();\n    }\n    //Fills result Map with the amounts of notes and coins \n    updateTables(total, previousTotal, result, useBackend, difference) {\n      if (useBackend) {\n        this.calcBackend(total, previousTotal, result, difference);\n      } else {\n        this.calcFrontend(total, previousTotal, result, difference);\n      }\n    }\n    //Gives back result + difference  Maps in an array  from backend \n    calcBackend(total, previousTotal, result, difference) {\n      console.log(\"using backend\");\n      let url = \"http://localhost:5000/api/processFormData\";\n      let dto = new Dto(total, result); // no need to send a difference\n      ;\n      //making post request to backend and setting table data with the response \n      let response = this.httpClient.post(url, dto).subscribe(dto => {\n        //setting result\n        let i = 0;\n        for (let key of result.keys()) {\n          result.set(key, dto.result[i]);\n          i++;\n        }\n        // Setting difference\n        if (previousTotal != null) {\n          i = 0;\n          for (let key of result.keys()) {\n            difference.set(key, dto.difference[i]);\n            i++;\n          }\n        }\n      });\n    }\n    calcFrontend(total, previousTotal, result, difference) {\n      let previousResult = new Map(result); //current Result becomes past result, useful for calculating difference later in this method\n      let rest = total;\n      //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n      for (let key of result.keys()) {\n        let value = Math.floor(rest / key);\n        result.set(key, value); //should modify result as a side effect \n        rest = rest % key;\n      }\n      //calculating the difference\n      if (previousTotal != null) this.calcFrontDifference(result, previousResult, difference);\n    }\n    calcFrontDifference(result, previousResult, difference) {\n      console.log('dd');\n      for (let key of result.keys()) {\n        let diff = result.get(key) - previousResult.get(key);\n        if (diff > 0) {\n          difference.set(key, '+' + diff);\n        } else if (diff < 0) {\n          difference.set(key, '' + diff);\n        } else if (diff == 0 && previousResult.get(key) != 0) {\n          difference.set(key, ' ' + diff);\n        } else if (diff == 0) {\n          difference.set(key, '' + diff);\n        }\n      }\n    }\n  }\n  FormService.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  FormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}