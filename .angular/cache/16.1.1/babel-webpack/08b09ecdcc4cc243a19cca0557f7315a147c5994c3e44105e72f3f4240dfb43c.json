{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Dto } from '../common/dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormService {\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.submittedForm = new Subject();\n  }\n  //Fills result Map with the amounts of notes and coins \n  updateTables(total, previousTotal, result, previousResult, useBackend, difference) {\n    if (useBackend) {\n      this.calcBackend(total, previousTotal, result, previousResult, difference);\n    } else {\n      this.calcFrontend(total, previousTotal, result, previousResult, difference);\n      // xc console.log(previousTotal);\n    }\n  }\n  //Gives back result + difference  Maps in an array  from backend \n  calcBackend(total, previousTotal, result, previousResult, difference) {\n    console.log(\"using backend\");\n    let url = \"http://localhost:5000/api/processFormData\";\n    //let dto = new Dto(total, JSON.stringify(Object.fromEntries(result)), JSON.stringify(Object.fromEntries(previousResult)), JSON.stringify(Object.fromEntries(difference)));\n    // let dto = new Dto(total, Object.fromEntries(result), Object.fromEntries(previousResult), Object.fromEntries(difference));\n    let dto = new Dto(total, result, previousResult); // no need to send a difference\n    ;\n    let response = this.httpClient.post(url, dto).subscribe(dto => {\n      console.log(\"response dto =\" + dto);\n      console.log(\"response dto result=\" + dto.result);\n      console.log(\"response dto difference=\" + dto.result);\n      //result = Dto.arrToMap(dto.result);\n      let i = 0;\n      for (let key of result.keys()) {\n        result.set(key, dto.result[i]);\n        i++;\n      }\n      if (previousTotal != null) {\n        difference = Dto.arrToMap(dto.difference);\n        //apply diff = dto.diff ! \n      }\n    });\n    // result = result of call . 0   etc.   so no need for return type \n    // difference = result of call . 1\n  }\n\n  calcFrontend(total, previousTotal, result, previousResult, difference) {\n    previousResult = new Map(result); //current Result becomes past result\n    let rest = total;\n    //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n    for (let key of result.keys()) {\n      let value = Math.floor(rest / key);\n      result.set(key, value); //should modify result as a side effect \n      rest = rest % key;\n    }\n    //calculating the difference\n    if (previousTotal != null) this.calcFrontDifference(result, previousResult, difference);\n  }\n  calcFrontDifference(result, previousResult, difference) {\n    console.log('dd');\n    for (let key of result.keys()) {\n      let diff = result.get(key) - previousResult.get(key);\n      if (diff > 0) {\n        difference.set(key, '+' + diff);\n      } else if (diff < 0) {\n        difference.set(key, '' + diff);\n      } else if (diff == 0 && previousResult.get(key) != 0) {\n        difference.set(key, ' ' + diff);\n      } else if (diff == 0) {\n        difference.set(key, '' + diff);\n      }\n    }\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)(i0.ɵɵinject(i1.HttpClient));\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","Dto","FormService","constructor","httpClient","submittedForm","updateTables","total","previousTotal","result","previousResult","useBackend","difference","calcBackend","calcFrontend","console","log","url","dto","response","post","subscribe","i","key","keys","set","arrToMap","Map","rest","value","Math","floor","calcFrontDifference","diff","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Dto } from '../common/dto';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  submittedForm: Subject<[number, boolean]> = new Subject<[number, boolean]>;\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor(private httpClient: HttpClient) { }\n\n  //Fills result Map with the amounts of notes and coins \n\n  updateTables(total: number, previousTotal: number | null, result: Map<number, number>,\n    previousResult: Map<number, number>,\n    useBackend: boolean,\n    difference: Map<number, string>) : void {\n\n      if (useBackend) {\n        this.calcBackend(total, previousTotal, result, previousResult, difference);\n      } else {\n        this.calcFrontend(total, previousTotal, result, previousResult, difference);\n        \n        // xc console.log(previousTotal);\n      }\n  }\n\n  //Gives back result + difference  Maps in an array  from backend \n\n  calcBackend(total: number, previousTotal: number | null, \n    result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>): void \n  {\n\n      console.log(\"using backend\");\n      let url = \"http://localhost:5000/api/processFormData\";\n      //let dto = new Dto(total, JSON.stringify(Object.fromEntries(result)), JSON.stringify(Object.fromEntries(previousResult)), JSON.stringify(Object.fromEntries(difference)));\n      // let dto = new Dto(total, Object.fromEntries(result), Object.fromEntries(previousResult), Object.fromEntries(difference));\n      let dto = new Dto(total, result, previousResult);   // no need to send a difference\n\n     ;\n      let response = this.httpClient.post<Dto>(url,dto).subscribe(\n        dto =>\n        {\n          console.log(\"response dto =\" + dto);\n          console.log(\"response dto result=\" + dto.result);\n          console.log(\"response dto difference=\" + dto.result);\n\n          //result = Dto.arrToMap(dto.result);\n          let i: number = 0;\n          for (let key of result.keys()) {\n            result.set(key, dto.result[i]);  \n            i++;\n          }\n          if (previousTotal != null) \n            {\n              difference = Dto.arrToMap(dto.difference);\n              \n              //apply diff = dto.diff ! \n            }\n          }\n      ); \n      \n      \n      // result = result of call . 0   etc.   so no need for return type \n      // difference = result of call . 1\n  }\n\n\n  calcFrontend(total: number,previousTotal: number | null, result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>) : void  // : Map<any, any>[] lets try no return\n  {\n    previousResult = new Map(result);   //current Result becomes past result\n\n\n\n    let rest: number = total;\n    //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n    for (let key of result.keys()) {\n      let value: number = Math.floor(rest / key);\n      result.set(key, value);  //should modify result as a side effect \n\n      rest = rest % key;\n    }\n    //calculating the difference\n    if (previousTotal != null) \n      this.calcFrontDifference(result, previousResult, difference);\n    \n\n\n  }\n\n  calcFrontDifference(result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>) : void \n  {\n    console.log('dd')\n    for (let key of result.keys()) {\n\n      let diff: number = result.get(key)! - previousResult.get(key)!;\n\n      if (diff > 0) {\n        difference.set(key, ('+' + diff));\n      } else if (diff < 0) {\n        difference.set(key, ('' + diff));\n      } else if (diff == 0 && previousResult.get(key) != 0) {\n        difference.set(key, (' ' + diff)); \n      }else if (diff == 0) {\n        difference.set(key, ('' + diff));\n      }\n\n    }\n\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}