{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Dto } from '../common/dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormService {\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.submittedForm = new Subject();\n  }\n  //Fills result Map with the amounts of notes and coins \n  updateTables(total, previousTotal, result, previousResult, useBackend, difference) {\n    if (useBackend) {\n      this.calcBackend(total, result, previousResult, difference);\n    } else {\n      this.calcFrontend(total, previousTotal, result, previousResult, difference);\n      // xc console.log(previousTotal);\n    }\n  }\n  //Gives back result + difference  Maps in an array  from backend \n  calcBackend(total, result, previousResult, difference) {\n    console.log(\"using backend\");\n    let url = \"http://localhost:5000/api/processFormData\";\n    let dto = new Dto(total, JSON.stringify(Object.fromEntries(result)), JSON.stringify(Object.fromEntries(previousResult)), JSON.stringify(Object.fromEntries(difference)));\n    console.log(\"dto to be sent : \" + dto);\n    let response = this.httpClient.post(url, dto).subscribe(dto => {\n      //result = dto.result;\n      //previousResult = dto.previousResult;\n      //difference = dto.difference;\n    });\n    // result = result of call . 0   etc.   so no need for return type \n    // difference = result of call . 1\n  }\n\n  calcFrontend(total, previousTotal, result, previousResult, difference) {\n    previousResult = new Map(result); //current Result becomes past result\n    let rest = total;\n    //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n    for (let key of result.keys()) {\n      let value = Math.floor(rest / key);\n      result.set(key, value); //should modify result as a side effect \n      rest = rest % key;\n    }\n    //calculating the difference\n    if (previousTotal != null) this.calcFrontDifference(result, previousResult, difference);\n  }\n  calcFrontDifference(result, previousResult, difference) {\n    console.log('dd');\n    for (let key of result.keys()) {\n      let diff = result.get(key) - previousResult.get(key);\n      if (diff > 0) {\n        difference.set(key, '+' + diff);\n      } else if (diff < 0) {\n        difference.set(key, '' + diff);\n      } else if (diff == 0 && previousResult.get(key) != 0) {\n        difference.set(key, ' ' + diff);\n      } else if (diff == 0) {\n        difference.set(key, '' + diff);\n      }\n    }\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)(i0.ɵɵinject(i1.HttpClient));\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","Dto","FormService","constructor","httpClient","submittedForm","updateTables","total","previousTotal","result","previousResult","useBackend","difference","calcBackend","calcFrontend","console","log","url","dto","JSON","stringify","Object","fromEntries","response","post","subscribe","Map","rest","key","keys","value","Math","floor","set","calcFrontDifference","diff","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Dto } from '../common/dto';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  submittedForm: Subject<[number, boolean]> = new Subject<[number, boolean]>;\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor(private httpClient: HttpClient) { }\n\n  //Fills result Map with the amounts of notes and coins \n\n  updateTables(total: number, previousTotal: number | null, result: Map<number, number>,\n    previousResult: Map<number, number>,\n    useBackend: boolean,\n    difference: Map<number, string>) : void {\n\n      if (useBackend) {\n        this.calcBackend(total, result, previousResult, difference);\n      } else {\n        this.calcFrontend(total, previousTotal, result, previousResult, difference);\n        // xc console.log(previousTotal);\n      }\n  }\n\n  //Gives back result + difference  Maps in an array  from backend \n\n  calcBackend(total: number, result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>): void {\n\n      console.log(\"using backend\");\n      let url = \"http://localhost:5000/api/processFormData\";\n      let dto = new Dto(total, JSON.stringify(Object.fromEntries(result)), JSON.stringify(Object.fromEntries(previousResult)), JSON.stringify(Object.fromEntries(difference)));\n      console.log(\"dto to be sent : \" + dto)\n     ;\n      let response = this.httpClient.post<Dto>(url,dto).subscribe(\n        dto =>\n        {\n           //result = dto.result;\n           //previousResult = dto.previousResult;\n           //difference = dto.difference;\n        }\n      ); \n      \n      \n      // result = result of call . 0   etc.   so no need for return type \n      // difference = result of call . 1\n  }\n\n\n  calcFrontend(total: number,previousTotal: number | null, result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>) : void  // : Map<any, any>[] lets try no return\n  {\n    previousResult = new Map(result);   //current Result becomes past result\n\n\n\n    let rest: number = total;\n    //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n    for (let key of result.keys()) {\n      let value: number = Math.floor(rest / key);\n      result.set(key, value);  //should modify result as a side effect \n\n      rest = rest % key;\n    }\n    //calculating the difference\n    if (previousTotal != null) \n      this.calcFrontDifference(result, previousResult, difference);\n    \n\n\n  }\n\n  calcFrontDifference(result: Map<number, number>,\n    previousResult: Map<number, number>,\n    difference: Map<number, string>) : void \n  {\n    console.log('dd')\n    for (let key of result.keys()) {\n\n      let diff: number = result.get(key)! - previousResult.get(key)!;\n\n      if (diff > 0) {\n        difference.set(key, ('+' + diff));\n      } else if (diff < 0) {\n        difference.set(key, ('' + diff));\n      } else if (diff == 0 && previousResult.get(key) != 0) {\n        difference.set(key, (' ' + diff)); \n      }else if (diff == 0) {\n        difference.set(key, ('' + diff));\n      }\n\n    }\n\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}