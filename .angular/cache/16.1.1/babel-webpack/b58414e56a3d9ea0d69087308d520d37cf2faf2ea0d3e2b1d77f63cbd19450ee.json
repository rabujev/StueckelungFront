{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ResultTableComponent = class ResultTableComponent {\n  //Injecting the object for possible denominations + the object form service\n  // and using parameter Properties to simultaneously define both as a property\n  constructor(denomValues, formService) {\n    this.denomValues = denomValues;\n    this.formService = formService;\n    //Initial Map with denoms as keys and 0 as values for now\n    this.initialDenoms = this.denomValues.denomMap();\n    this.result = new Map(this.denomValues.denomMap());\n    this.previousResult = new Map(this.denomValues.denomMap());\n    this.difference = new Map();\n  }\n  ngOnInit() {\n    this.formService.validAmount.subscribe(amount => {\n      // this.result = \n      this.formService.calcResult(amount, this.result, this.previousResult);\n      //  this.difference = \n      this.formService.calcResult(amount, this.result, this.previousResult);\n    });\n  }\n};\nResultTableComponent = __decorate([Component({\n  selector: 'app-result-table',\n  templateUrl: './result-table.component.html',\n  styleUrls: ['./result-table.component.css']\n})], ResultTableComponent);","map":{"version":3,"names":["Component","ResultTableComponent","constructor","denomValues","formService","initialDenoms","denomMap","result","Map","previousResult","difference","ngOnInit","validAmount","subscribe","amount","calcResult","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\core\\result-table\\result-table.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DenomValues } from '../denom-values';\nimport { FormService } from 'src/app/services/form.service';\n\n\n\n@Component({\n  selector: 'app-result-table',\n  templateUrl: './result-table.component.html',\n  styleUrls: ['./result-table.component.css']\n})\nexport class ResultTableComponent {\n\n  //Injecting the object for possible denominations + the object form service\n  // and using parameter Properties to simultaneously define both as a property\n  \n  constructor(private denomValues: DenomValues,\n              private formService: FormService) {};\n\n  //Initial Map with denoms as keys and 0 as values for now\n\n  private initialDenoms: Map<number, number> = this.denomValues.denomMap();\n  \n  result: Map<number, number> = new Map(this.denomValues.denomMap());\n\n  previousResult: Map<number, number> = new Map(this.denomValues.denomMap());\n\n  difference: Map<number, string> = new Map();\n\n\n\n  ngOnInit() {\n    this.formService.validAmount.subscribe( \n      amount => { \n       // this.result = \n          this.formService.calcResult( amount, this.result, this.previousResult);\n      //  this.difference = \n          this.formService.calcResult( amount, this.result, this.previousResult);\n      }\n    );\n  }\n\n  \n  \n\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWlC,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAE/B;EACA;EAEAC,YAAoBC,WAAwB,EACxBC,WAAwB;IADxB,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IAE/B;IAEQ,KAAAC,aAAa,GAAwB,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IAExE,KAAAC,MAAM,GAAwB,IAAIC,GAAG,CAAC,IAAI,CAACL,WAAW,CAACG,QAAQ,EAAE,CAAC;IAElE,KAAAG,cAAc,GAAwB,IAAID,GAAG,CAAC,IAAI,CAACL,WAAW,CAACG,QAAQ,EAAE,CAAC;IAE1E,KAAAI,UAAU,GAAwB,IAAIF,GAAG,EAAE;EAVI;EAc/CG,QAAQA,CAAA;IACN,IAAI,CAACP,WAAW,CAACQ,WAAW,CAACC,SAAS,CACpCC,MAAM,IAAG;MACR;MACG,IAAI,CAACV,WAAW,CAACW,UAAU,CAAED,MAAM,EAAE,IAAI,CAACP,MAAM,EAAE,IAAI,CAACE,cAAc,CAAC;MAC1E;MACI,IAAI,CAACL,WAAW,CAACW,UAAU,CAAED,MAAM,EAAE,IAAI,CAACP,MAAM,EAAE,IAAI,CAACE,cAAc,CAAC;IAC1E,CAAC,CACF;EACH;CAOD;AApCYR,oBAAoB,GAAAe,UAAA,EALhChB,SAAS,CAAC;EACTiB,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWlB,oBAAoB,CAoChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}