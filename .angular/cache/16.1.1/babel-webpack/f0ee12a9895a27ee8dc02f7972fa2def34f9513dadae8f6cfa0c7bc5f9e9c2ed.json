{"ast":null,"code":"import * as i0 from \"@angular/core\";\n//Class holds array of possible currency denominations.\nexport class DenomValues {\n  denomMap() {\n    const map = new Map();\n    this.denomArr.forEach(denom => map.set(denom, 0));\n    return map;\n  }\n}\nDenomValues.denomArr = [200, 100, 50, 20, 10, 5, 2, 1, 0.50, 0.20, 0.10, 0.05, 0.02, 0.01];\nDenomValues.ɵfac = function DenomValues_Factory(t) {\n  return new (t || DenomValues)();\n};\nDenomValues.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DenomValues,\n  factory: DenomValues.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DenomValues","denomMap","map","Map","denomArr","forEach","denom","set","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\core\\denom-values.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: 'root'\n  })\n  \n//Class holds array of possible currency denominations.\nexport class DenomValues {\n    public static denomArr: number[] = \n        [200, 100, 50, 20, 10, 5, 2, 1, 0.50, 0.20, 0.10, 0.05, 0.02, 0.01];\n    \n        denomMap(): Map<number, number> {\n            const map = new Map<number, number>;\n            this.denomArr.forEach( \n                denom => map.set(denom, 0) );\n            return map;\n\n        }\n}\n"],"mappings":";AAMA;AACA,OAAM,MAAOA,WAAW;EAIhBC,QAAQA,CAAA;IACJ,MAAMC,GAAG,GAAG,IAAIC,GAAmB,CAAnB,CAAmB;IACnC,IAAI,CAACC,QAAQ,CAACC,OAAO,CACjBC,KAAK,IAAIJ,GAAG,CAACK,GAAG,CAACD,KAAK,EAAE,CAAC,CAAC,CAAE;IAChC,OAAOJ,GAAG;EAEd;;AAVKF,WAAW,CACNI,QAAQ,GAClB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAF9DJ,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;EAAAC,UAAA,EAJR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}