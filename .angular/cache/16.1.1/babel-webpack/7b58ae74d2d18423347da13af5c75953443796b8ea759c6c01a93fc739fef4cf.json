{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FormService {\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n  constructor() {\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.submittedForm = new Subject();\n  }\n  //Fills result Map with the amounts of notes and coins \n  updateTables(total, result, previousResult, useBackend, difference) {\n    if (useBackend) {\n      this.calcBackend(total, result, previousResult, difference);\n    } else {\n      this.calcFrontend(total, result, previousResult, difference);\n    }\n  }\n  //gives back result + difference  Maps in an array  from backend \n  calcBackend(total, result, previousResult, difference) {\n    console.log(\"using backend calculate IF\");\n    return [];\n  }\n  calcFrontend(total, result, previousResult, difference) {\n    let resultBeforeEdit = new Map(result);\n    let rest = total;\n    //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n    for (let key of result.keys()) {\n      let value = Math.floor(rest / key);\n      result.set(key, value); //should modify result as a side effect \n      rest = rest % key;\n    }\n    //calculating the difference\n    if (previousResult.size > 0) {\n      console.log('size of previous result is ' + previousResult.size);\n      this.calcDifference(result, previousResult, difference);\n    }\n    console.log('size of previous result is ' + previousResult.size);\n    previousResult = new Map(resultBeforeEdit);\n    for (let key of previousResult.values()) {\n      console.log('previous Res look value is  ' + key); //Lokesh Raj John\n    }\n    //return [newResult, this.calcDifference(newResult, previousResult,difference)];\n  }\n\n  calcDifference(result, previousResult, difference) {\n    for (let key of result.keys()) {\n      let diff = result.get(key) - previousResult.get(key);\n      if (diff > 0) {\n        difference.set(key, '+' + diff);\n      } else if (diff < 0) {\n        difference.set(key, '-' + diff);\n      } else if (diff = 0) {\n        difference.set(key, '' + diff);\n      }\n    }\n    //return new Map<number, string>;\n  }\n}\n\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)();\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","FormService","constructor","submittedForm","updateTables","total","result","previousResult","useBackend","difference","calcBackend","calcFrontend","console","log","resultBeforeEdit","Map","rest","key","keys","value","Math","floor","set","size","calcDifference","values","diff","get","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  submittedForm: Subject<[number, boolean]> = new Subject<[number, boolean]>;\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor() { }\n\n    //Fills result Map with the amounts of notes and coins \n    updateTables(total: number, result: Map<number, number>,\n    previousResult: Map<number, number>, \n    useBackend: boolean,\n    difference: Map<number, string> ) {\n      if (useBackend) {\n        this.calcBackend(total, result, previousResult, difference);\n      } else {\n        this.calcFrontend(total, result, previousResult, difference);\n\n      }\n    }\n\n        //gives back result + difference  Maps in an array  from backend \n\n    calcBackend(total: number, result: Map<number, number>,\n      previousResult: Map<number, number>, \n      difference: Map<number, string> ) : Map<any, any>[] {\n        console.log(\"using backend calculate IF\");\n        return [];\n      }\n\n\n    calcFrontend(total: number, result: Map<number, number>,\n       previousResult: Map<number, number>, \n       difference: Map<number, string> )  // : Map<any, any>[] lets try no return\n    {\n\n      let resultBeforeEdit = new Map(result);\n              \n        let rest: number = total;\n        //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n        for (let key of result.keys()) {\n          let value: number = Math.floor(rest/key);\n          result.set(key, value);  //should modify result as a side effect \n\n          rest = rest%key;\n        }\n        //calculating the difference\n        if (previousResult.size > 0) {\n          console.log('size of previous result is ' + previousResult.size)\n        this.calcDifference(result, previousResult, difference);\n        }\n        console.log('size of previous result is ' + previousResult.size)\n\n        previousResult = new Map(resultBeforeEdit);\n\n        for (let key of previousResult.values()) {\n          console.log('previous Res look value is  ' + key);                   //Lokesh Raj John\n      }\n\n\n        \n        //return [newResult, this.calcDifference(newResult, previousResult,difference)];\n        \n      \n  \n    }\n\n    calcDifference(result: Map<number, number>, \n                   previousResult: Map<number, number>,\n                   difference: Map<number, string>)//: Map<number, string> lets try not returning andu sing side effects\n                   {\n\n      \n        for (let key of result.keys()) {\n          let diff: number = result.get(key)! - previousResult.get(key)!;\n          if (diff > 0) {\n            difference.set(key, ('+' + diff ));\n          } else if (diff < 0) {\n            difference.set(key, ('-' + diff ));\n          } else if (diff = 0) {\n            difference.set(key, ('' + diff ));\n           }\n        }\n      \n      //return new Map<number, string>;\n    }\n\n\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAItB;EAEAC,YAAA;IAJA;IACA,KAAAC,aAAa,GAA+B,IAAIH,OAA0B,CAA1B,CAA0B;EAG1D;EAEd;EACAI,YAAYA,CAACC,KAAa,EAAEC,MAA2B,EACvDC,cAAmC,EACnCC,UAAmB,EACnBC,UAA+B;IAC7B,IAAID,UAAU,EAAE;MACd,IAAI,CAACE,WAAW,CAACL,KAAK,EAAEC,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;KAC5D,MAAM;MACL,IAAI,CAACE,YAAY,CAACN,KAAK,EAAEC,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;;EAGhE;EAEI;EAEJC,WAAWA,CAACL,KAAa,EAAEC,MAA2B,EACpDC,cAAmC,EACnCE,UAA+B;IAC7BG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,OAAO,EAAE;EACX;EAGFF,YAAYA,CAACN,KAAa,EAAEC,MAA2B,EACpDC,cAAmC,EACnCE,UAA+B;IAGhC,IAAIK,gBAAgB,GAAG,IAAIC,GAAG,CAACT,MAAM,CAAC;IAEpC,IAAIU,IAAI,GAAWX,KAAK;IACxB;IACA,KAAK,IAAIY,GAAG,IAAIX,MAAM,CAACY,IAAI,EAAE,EAAE;MAC7B,IAAIC,KAAK,GAAWC,IAAI,CAACC,KAAK,CAACL,IAAI,GAACC,GAAG,CAAC;MACxCX,MAAM,CAACgB,GAAG,CAACL,GAAG,EAAEE,KAAK,CAAC,CAAC,CAAE;MAEzBH,IAAI,GAAGA,IAAI,GAACC,GAAG;;IAEjB;IACA,IAAIV,cAAc,CAACgB,IAAI,GAAG,CAAC,EAAE;MAC3BX,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGN,cAAc,CAACgB,IAAI,CAAC;MAClE,IAAI,CAACC,cAAc,CAAClB,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;;IAEvDG,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGN,cAAc,CAACgB,IAAI,CAAC;IAEhEhB,cAAc,GAAG,IAAIQ,GAAG,CAACD,gBAAgB,CAAC;IAE1C,KAAK,IAAIG,GAAG,IAAIV,cAAc,CAACkB,MAAM,EAAE,EAAE;MACvCb,OAAO,CAACC,GAAG,CAAC,8BAA8B,GAAGI,GAAG,CAAC,CAAC,CAAmB;;IAKvE;EAIJ;;EAEAO,cAAcA,CAAClB,MAA2B,EAC3BC,cAAmC,EACnCE,UAA+B;IAI1C,KAAK,IAAIQ,GAAG,IAAIX,MAAM,CAACY,IAAI,EAAE,EAAE;MAC7B,IAAIQ,IAAI,GAAWpB,MAAM,CAACqB,GAAG,CAACV,GAAG,CAAE,GAAGV,cAAc,CAACoB,GAAG,CAACV,GAAG,CAAE;MAC9D,IAAIS,IAAI,GAAG,CAAC,EAAE;QACZjB,UAAU,CAACa,GAAG,CAACL,GAAG,EAAG,GAAG,GAAGS,IAAM,CAAC;OACnC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;QACnBjB,UAAU,CAACa,GAAG,CAACL,GAAG,EAAG,GAAG,GAAGS,IAAM,CAAC;OACnC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;QACnBjB,UAAU,CAACa,GAAG,CAACL,GAAG,EAAG,EAAE,GAAGS,IAAM,CAAC;;;IAIvC;EACF;;;AArFSzB,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}