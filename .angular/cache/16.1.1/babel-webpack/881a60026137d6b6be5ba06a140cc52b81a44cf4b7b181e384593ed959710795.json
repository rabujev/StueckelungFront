{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FormService {\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n  constructor() {\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.submittedForm = new Subject();\n  }\n  //Fills result Map with the amounts of notes and coins \n  updateTables(total, result, previousResult, useBackend, difference) {\n    if (useBackend) {\n      this.calcBackend(total, result, previousResult, difference);\n    } else {\n      this.calcFrontend(total, result, previousResult, difference);\n    }\n  }\n  //gives back result + difference  Maps in an array  from backend \n  calcBackend(total, result, previousResult, difference) {\n    console.log(\"using backend calculate IF\");\n    return [];\n  }\n  calcFrontend(total, result, previousResult, difference) {\n    previousResult = new Map(result); //current Result becomes past result\n  }\n}\n\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)();\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});\nlet rest = total;\n//for each currency denomination, calculates how many of them fit in the rest amount and fills result map\nfor (let key of result.keys()) {\n  let value = Math.floor(rest / key);\n  result.set(key, value); //should modify result as a side effect \n  rest = rest % key;\n}\n//calculating the difference\nif (previousResult.size > 0) {\n  //console.log('size of previous result is ' + previousResult.size)\n  this.calcDifference(result, previousResult, difference);\n}\n// previousResult = resultBeforeEdit;\nif (previousResult.size == 0) {\n  for (let key of previousResult.keys()) {\n    previousResult.set(key, previousResult.get(key));\n    console.log('resultBeforeEdit.get(key) =  ' + previousResult.get(key));\n  }\n}\ncalcDifference(result, Map, previousResult, Map, difference, Map); //: Map<number, string> lets try not returning andu sing side effects\n{\n  for (let key of result.keys()) {\n    let diff = result.get(key) - previousResult.get(key);\n    console.log('diff is ' + diff);\n    if (diff > 0) {\n      difference.set(key, '+' + diff);\n    } else if (diff < 0) {\n      difference.set(key, '-' + diff);\n    } else if (diff = 0) {\n      difference.set(key, '' + diff);\n    }\n  }\n  //return new Map<number, string>;\n}","map":{"version":3,"names":["Subject","FormService","constructor","submittedForm","updateTables","total","result","previousResult","useBackend","difference","calcBackend","calcFrontend","console","log","Map","factory","ɵfac","providedIn","rest","key","keys","value","Math","floor","set","size","calcDifference","get","diff"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  submittedForm: Subject<[number, boolean]> = new Subject<[number, boolean]>;\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor() { }\n\n    //Fills result Map with the amounts of notes and coins \n    updateTables(total: number, result: Map<number, number>,\n    previousResult: Map<number, number>, \n    useBackend: boolean,\n    difference: Map<number, string> ) {\n      if (useBackend) {\n        this.calcBackend(total, result, previousResult, difference);\n      } else {\n        this.calcFrontend(total, result, previousResult, difference);\n\n      }\n    }\n\n        //gives back result + difference  Maps in an array  from backend \n\n    calcBackend(total: number, result: Map<number, number>,\n      previousResult: Map<number, number>, \n      difference: Map<number, string> ) : Map<any, any>[] {\n        console.log(\"using backend calculate IF\");\n        return [];\n      }\n\n\n    calcFrontend(total: number, result: Map<number, number>,\n       previousResult: Map<number, number>, \n       difference: Map<number, string> )  // : Map<any, any>[] lets try no return\n    {\n      previousResult = new Map(result);   //current Result becomes past result\n\n      \n      }\n              \n        let rest: number = total;\n        //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n        for (let key of result.keys()) {\n          let value: number = Math.floor(rest/key);\n          result.set(key, value);  //should modify result as a side effect \n\n          rest = rest%key;\n        }\n        //calculating the difference\n        if (previousResult.size > 0) {\n          //console.log('size of previous result is ' + previousResult.size)\n        this.calcDifference(result, previousResult, difference);\n        }\n        \n\n       // previousResult = resultBeforeEdit;\n\n       if (previousResult.size == 0) {\n        for (let key of previousResult.keys()) {\n          \n          previousResult.set(key, previousResult.get(key)!);  \n          console.log('resultBeforeEdit.get(key) =  ' + previousResult.get(key))\n  \n        }\n      }\n\n        \n        //return [newResult, this.calcDifference(newResult, previousResult,difference)];\n        \n      \n  \n    }\n\n    calcDifference(result: Map<number, number>, \n                   previousResult: Map<number, number>,\n                   difference: Map<number, string>)//: Map<number, string> lets try not returning andu sing side effects\n                   {\n\n      \n        for (let key of result.keys()) {\n          let diff: number = result.get(key)! - previousResult.get(key)!;\n          console.log('diff is ' + diff);\n          if (diff > 0) {\n            difference.set(key, ('+' + diff ));\n          } else if (diff < 0) {\n            difference.set(key, ('-' + diff ));\n          } else if (diff = 0) {\n            difference.set(key, ('' + diff ));\n           }\n        }\n      \n      //return new Map<number, string>;\n    }\n\n\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAItB;EAEAC,YAAA;IAJA;IACA,KAAAC,aAAa,GAA+B,IAAIH,OAA0B,CAA1B,CAA0B;EAG1D;EAEd;EACAI,YAAYA,CAACC,KAAa,EAAEC,MAA2B,EACvDC,cAAmC,EACnCC,UAAmB,EACnBC,UAA+B;IAC7B,IAAID,UAAU,EAAE;MACd,IAAI,CAACE,WAAW,CAACL,KAAK,EAAEC,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;KAC5D,MAAM;MACL,IAAI,CAACE,YAAY,CAACN,KAAK,EAAEC,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;;EAGhE;EAEI;EAEJC,WAAWA,CAACL,KAAa,EAAEC,MAA2B,EACpDC,cAAmC,EACnCE,UAA+B;IAC7BG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,OAAO,EAAE;EACX;EAGFF,YAAYA,CAACN,KAAa,EAAEC,MAA2B,EACpDC,cAAmC,EACnCE,UAA+B;IAEhCF,cAAc,GAAG,IAAIO,GAAG,CAACR,MAAM,CAAC,CAAC,CAAG;EAGpC;;;AAtCOL,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;EAAAC,UAAA,EAFV;AAAM;AA0CZ,IAAIC,IAAI,GAAWb,KAAK;AACxB;AACA,KAAK,IAAIc,GAAG,IAAIb,MAAM,CAACc,IAAI,EAAE,EAAE;EAC7B,IAAIC,KAAK,GAAWC,IAAI,CAACC,KAAK,CAACL,IAAI,GAACC,GAAG,CAAC;EACxCb,MAAM,CAACkB,GAAG,CAACL,GAAG,EAAEE,KAAK,CAAC,CAAC,CAAE;EAEzBH,IAAI,GAAGA,IAAI,GAACC,GAAG;;AAEjB;AACA,IAAIZ,cAAc,CAACkB,IAAI,GAAG,CAAC,EAAE;EAC3B;EACF,IAAI,CAACC,cAAc,CAACpB,MAAM,EAAEC,cAAc,EAAEE,UAAU,CAAC;;AAIxD;AAEA,IAAIF,cAAc,CAACkB,IAAI,IAAI,CAAC,EAAE;EAC7B,KAAK,IAAIN,GAAG,IAAIZ,cAAc,CAACa,IAAI,EAAE,EAAE;IAErCb,cAAc,CAACiB,GAAG,CAACL,GAAG,EAAEZ,cAAc,CAACoB,GAAG,CAACR,GAAG,CAAE,CAAC;IACjDP,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGN,cAAc,CAACoB,GAAG,CAACR,GAAG,CAAC,CAAC;;;AAY5EO,cAAc,CAACpB,MAAM,EAAEQ,GAAmB,EAC3BP,cAAc,EAAEO,GAAmB,EACnCL,UAAU,EAAEK,GAAmB,CAAC;AAChC;EAGX,KAAK,IAAIK,GAAG,IAAIb,MAAM,CAACc,IAAI,EAAE,EAAE;IAC7B,IAAIQ,IAAI,GAAWtB,MAAM,CAACqB,GAAG,CAACR,GAAG,CAAE,GAAGZ,cAAc,CAACoB,GAAG,CAACR,GAAG,CAAE;IAC9DP,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGe,IAAI,CAAC;IAC9B,IAAIA,IAAI,GAAG,CAAC,EAAE;MACZnB,UAAU,CAACe,GAAG,CAACL,GAAG,EAAG,GAAG,GAAGS,IAAM,CAAC;KACnC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;MACnBnB,UAAU,CAACe,GAAG,CAACL,GAAG,EAAG,GAAG,GAAGS,IAAM,CAAC;KACnC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;MACnBnB,UAAU,CAACe,GAAG,CAACL,GAAG,EAAG,EAAE,GAAGS,IAAM,CAAC;;;EAIvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}