{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FormService {\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n  constructor() {\n    //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n    this.submittedForm = new Subject();\n  }\n  //Fills result Map with the amounts of notes and coins \n  calcResult(total, result, previousResult, useBackend) {\n    let newResult = new Map();\n    if (useBackend) {\n      console.log(\"using backend calculate IF\");\n      this.callBackEnd(total, result);\n      return [newResult, previousResult];\n    } else {\n      let rest = total;\n      //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n      for (let key of result.keys()) {\n        let value = Math.floor(rest / key);\n        result.set(key, value); //should modify result as a side effect \n        rest = rest % key;\n      }\n      //calculating the difference\n      return [newResult, this.calcDifference(newResult, previousResult)];\n    }\n  }\n  calcDifference(result, previousResult) {\n    if (previousResult.size > 0) {\n      let counter;\n      for (let key of result.keys()) {}\n    }\n    return new Map();\n  }\n  //gives back result + difference  Maps in an array  from backend \n  callBackEnd(total, result) {\n    return [];\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)();\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","FormService","constructor","submittedForm","calcResult","total","result","previousResult","useBackend","newResult","Map","console","log","callBackEnd","rest","key","keys","value","Math","floor","set","calcDifference","size","counter","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\services\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  //this is a Subject (multicastable Observable) others can subscribe to receive its value whenever updated.\n  submittedForm: Subject<[number, boolean]> = new Subject<[number, boolean]>;\n  //useBackend: boolean = true; //hopefully same instance injected everywhere    \n\n  constructor() { }\n\n    //Fills result Map with the amounts of notes and coins \n    calcResult(total: number, result: Map<number, number>,\n       previousResult: Map<number, number>, \n       useBackend: boolean)   : Map<any, any>[]\n    {\n\n      let newResult = new Map();\n      \n      if (useBackend) {\n        console.log(\"using backend calculate IF\");\n        this.callBackEnd(total, result);\n        return [newResult, previousResult];\n       }\n      else {        \n        \n        let rest: number = total;\n        //for each currency denomination, calculates how many of them fit in the rest amount and fills result map\n        for (let key of result.keys()) {\n          let value: number = Math.floor(rest/key);\n          result.set(key, value);  //should modify result as a side effect \n\n          rest = rest%key;\n        }\n        //calculating the difference\n        \n\n        return [newResult, this.calcDifference(newResult, previousResult)];\n        \n      }\n  \n    }\n\n    calcDifference(result: Map<number, number>, \n                   previousResult: Map<number, number>): Map<number, string> {\n\n      if (previousResult.size > 0) {\n        let counter \n        for (let key of result.keys()) {\n          \n        }\n      }\n      return new Map<number, string>;\n    }\n\n    //gives back result + difference  Maps in an array  from backend \n    callBackEnd(total: number, result: Map<number, number>): Map<any, any>[]  {\n      return [];\n    }\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAItB;EAEAC,YAAA;IAJA;IACA,KAAAC,aAAa,GAA+B,IAAIH,OAA0B,CAA1B,CAA0B;EAG1D;EAEd;EACAI,UAAUA,CAACC,KAAa,EAAEC,MAA2B,EAClDC,cAAmC,EACnCC,UAAmB;IAGpB,IAAIC,SAAS,GAAG,IAAIC,GAAG,EAAE;IAEzB,IAAIF,UAAU,EAAE;MACdG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,CAACC,WAAW,CAACR,KAAK,EAAEC,MAAM,CAAC;MAC/B,OAAO,CAACG,SAAS,EAAEF,cAAc,CAAC;KAClC,MACG;MAEH,IAAIO,IAAI,GAAWT,KAAK;MACxB;MACA,KAAK,IAAIU,GAAG,IAAIT,MAAM,CAACU,IAAI,EAAE,EAAE;QAC7B,IAAIC,KAAK,GAAWC,IAAI,CAACC,KAAK,CAACL,IAAI,GAACC,GAAG,CAAC;QACxCT,MAAM,CAACc,GAAG,CAACL,GAAG,EAAEE,KAAK,CAAC,CAAC,CAAE;QAEzBH,IAAI,GAAGA,IAAI,GAACC,GAAG;;MAEjB;MAGA,OAAO,CAACN,SAAS,EAAE,IAAI,CAACY,cAAc,CAACZ,SAAS,EAAEF,cAAc,CAAC,CAAC;;EAItE;EAEAc,cAAcA,CAACf,MAA2B,EAC3BC,cAAmC;IAEhD,IAAIA,cAAc,CAACe,IAAI,GAAG,CAAC,EAAE;MAC3B,IAAIC,OAAO;MACX,KAAK,IAAIR,GAAG,IAAIT,MAAM,CAACU,IAAI,EAAE,EAAE,C;;IAIjC,OAAO,IAAIN,GAAmB,CAAnB,CAAmB;EAChC;EAEA;EACAG,WAAWA,CAACR,KAAa,EAAEC,MAA2B;IACpD,OAAO,EAAE;EACX;;AAvDSL,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}