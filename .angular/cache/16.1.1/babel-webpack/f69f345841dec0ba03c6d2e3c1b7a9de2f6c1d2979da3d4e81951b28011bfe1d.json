{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/form.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/slide-toggle\";\nfunction AmountInputFormComponent_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Feld ist erforderlich\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AmountInputFormComponent_div_4_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"strong\");\n    i0.ɵɵtext(2, \"G\\u00FCltigen Betrag eingeben\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AmountInputFormComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, AmountInputFormComponent_div_4_div_1_Template, 3, 0, \"div\", 8);\n    i0.ɵɵtemplate(2, AmountInputFormComponent_div_4_div_2_Template, 3, 0, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.amount.errors == null ? null : ctx_r0.amount.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.amount.errors == null ? null : ctx_r0.amount.errors[\"pattern\"]);\n  }\n}\nexport class AmountInputFormComponent {\n  /**\n  Constructor with INJECTION for forms and our service\n  */\n  constructor(formBuilder, formService) {\n    this.formBuilder = formBuilder;\n    this.formService = formService;\n  }\n  //getters for our Form Controls, 1 for the amount and 1 for the toggle slider button \n  //\n  get amount() {\n    return this.inputForm.get('amount');\n  }\n  get backend() {\n    return this.inputForm.get('backend');\n  }\n  //On Init : Create form i.e. structure + validators  \n  //\n  ngOnInit() {\n    this.inputForm = this.formBuilder.group({\n      amount: new FormControl('', [Validators.required, Validators.pattern(\"^\\\\d+([\\\\.,][0-9]{1,2})?$\")]),\n      backend: new FormControl('')\n    });\n  }\n  //behaviour of submit button : if validation is passed => amount published to observer (tables)  via the Observable(Subject) in the injected service  \n  //\n  onSubmit() {\n    if (this.inputForm.valid) {\n      console.log(\"submitted (valid)\");\n      console.log(this.backend?.value);\n      let updatedAmount = parseFloat(this.amount.value.replace(',', '.'));\n      this.formService.submittedForm.next([updatedAmount, this.backend.value]);\n    }\n  }\n}\nAmountInputFormComponent.ɵfac = function AmountInputFormComponent_Factory(t) {\n  return new (t || AmountInputFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.FormService));\n};\nAmountInputFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AmountInputFormComponent,\n  selectors: [[\"app-amount-input-form\"]],\n  decls: 11,\n  vars: 2,\n  consts: [[1, \"mt-5\"], [1, \"container-fluid\"], [1, \"mb-4\", 3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"amount\", \"type\", \"text\", \"placeholder\", \"Betrag in EUR\", \"required\", \"\", 1, \"form-control\", \"mb-4\", \"w-auto\"], [\"class\", \"alert alert-danger alert-dismissible fade show w-50\", 4, \"ngIf\"], [\"formControlName\", \"backend\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"alert\", \"alert-danger\", \"alert-dismissible\", \"fade\", \"show\", \"w-50\"], [4, \"ngIf\"]],\n  template: function AmountInputFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function AmountInputFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelement(3, \"input\", 3);\n      i0.ɵɵtemplate(4, AmountInputFormComponent_div_4_Template, 3, 2, \"div\", 4);\n      i0.ɵɵelementStart(5, \"mat-slide-toggle\", 5);\n      i0.ɵɵtext(6, \"Backend Verarbeitung (Voreinstellung Frontend)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\")(8, \"br\");\n      i0.ɵɵelementStart(9, \"button\", 6);\n      i0.ɵɵtext(10, \"Berechnen\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.inputForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.amount.invalid && (ctx.amount.dirty || ctx.amount.touched));\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i4.MatSlideToggle],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AmountInputFormComponent_div_4_div_1_Template","AmountInputFormComponent_div_4_div_2_Template","ɵɵadvance","ɵɵproperty","ctx_r0","amount","errors","AmountInputFormComponent","constructor","formBuilder","formService","inputForm","get","backend","ngOnInit","group","required","pattern","onSubmit","valid","console","log","value","updatedAmount","parseFloat","replace","submittedForm","next","ɵɵdirectiveInject","i1","FormBuilder","i2","FormService","selectors","decls","vars","consts","template","AmountInputFormComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","AmountInputFormComponent_Template_form_ngSubmit_2_listener","AmountInputFormComponent_div_4_Template","invalid","dirty","touched"],"sources":["C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\core\\amount-input-form\\amount-input-form.component.ts","C:\\Users\\Jamal-external-drive\\Desktop\\CODE JAMAL\\CurrencyDenominationCalc\\frontend\\src\\app\\core\\amount-input-form\\amount-input-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { FormService } from 'src/app/services/form.service';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n\n\n\n\n\n@Component({\n  selector: 'app-amount-input-form',\n  templateUrl: './amount-input-form.component.html',\n  styleUrls: ['./amount-input-form.component.css'],\n  \n})\n\n\nexport class AmountInputFormComponent {\n\n  /** \n  Constructor with INJECTION for forms and our service\n  */\n  constructor(private formBuilder: FormBuilder,\n              private formService: FormService) {}\n\n    \n  //Property containing our Form object - asserting  it's non null w ! \n  //\n  inputForm!: FormGroup;\n\n  //getters for our Form Controls, 1 for the amount and 1 for the toggle slider button \n  //\n  get amount() {\n    return this.inputForm.get('amount')!;\n  }\n\n  get backend() {\n    return this.inputForm.get('backend');\n  }\n  \n\n  //On Init : Create form i.e. structure + validators  \n  //\n  ngOnInit(): void {\n    this.inputForm = this.formBuilder.group({\n      amount: new FormControl('', [Validators.required, \n                                   Validators.pattern(\"^\\\\d+([\\\\.,][0-9]{1,2})?$\")]),  //regex pattern accepting only valid EUR amounts  (the backslash has to be escaped in js, remember)\n      backend: new FormControl('')\n    });  \n  }\n    \n\n    //behaviour of submit button : if validation is passed => amount published to observer (tables)  via the Observable(Subject) in the injected service  \n    //\n  onSubmit() {\n    if (this.inputForm.valid) {\n      console.log(\"submitted (valid)\");\n      console.log(this.backend?.value);\n      let updatedAmount: number = parseFloat(this.amount.value.replace(',','.'));\n      this.formService.submittedForm.next([updatedAmount, this.backend!.value]); \n    }\n    \n  }\n\n  \n\n}\n\n\n","<div class=\"mt-5\"></div>\n    \n\n    <div class=\"container-fluid \">\n        <form [formGroup]=\"inputForm\" (ngSubmit)=\"onSubmit()\" class=\"mb-4\">\n\n            <input formControlName=\"amount\" type=\"text\" class=\"form-control mb-4 w-auto\" placeholder=\"Betrag in EUR\"\n                required>\n                \n\n\n            <!-- VALIDATION ERROR MESSAGE -->\n            <div *ngIf=\"amount.invalid && (amount.dirty || amount.touched)\" class=\"alert alert-danger alert-dismissible fade show w-50\">\n                <div *ngIf=\"amount.errors?.['required']\" >\n                    <strong>Feld ist erforderlich</strong>\n                </div>\n                <div *ngIf=\"amount.errors?.['pattern']\">\n                    <strong>Gültigen Betrag eingeben</strong>\n                </div>\n                <!-- \n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                -->\n\n            </div>\n            <mat-slide-toggle formControlName=\"backend\">Backend Verarbeitung (Voreinstellung Frontend)</mat-slide-toggle>\n            <br><br>\n\n            <!-- Submit Button -->\n            <button type=\"submit\" class=\"btn btn-primary\">Berechnen</button>\n\n        </form>\n    </div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}